# Project-wide Gradle settings.

# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.
# For more details on how to configure your build environment visit http://www.gradle.org/docs/current/userguide/build_environment.html
# MEMORY RELATED CONFIG ====================================================================================================================
# Specifies the JVM arguments used for the daemon process. The setting is particularly useful for tweaking memory settings. Default value:
# -Xmx10248m -XX:MaxPermSize=256m .
org.gradle.jvmargs=-Xmx4g -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
# Dex memory allocation should be at least 2gb less than the gradle memory allocation above. This allows for dex in process builds where the
# dex process runs in the same VM as gradle does. For more info see
# https://medium.com/google-developers/faster-android-studio-builds-with-dex-in-process-5988ed8aa37e#.qh098djyi
dexMemoryAllocation=2g
# OTHER GRADLE RELATED CONFIG ==============================================================================================================

# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. More details, visit
# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
org.gradle.parallel=true
# Keep gradle in a daemon thread that doesn't restart for every build, decreases initial build startup time
org.gradle.daemon=true
# Don't configure all modules on every build, decreases build time
org.gradle.configureondemand=true
# DEV LOCAL CONFIG =========================================================================================================================
# Speed hack to decrease dev build times. Doesn't do anything as it is, but if a developer wants to they can change the
# "increaseMinSdkForDev" property from "false" to "true" and create an apk with minSdk = 21 that takes advantage of the ART runtime support
# for multidex, resulting in faster builds. For more info see: https://developer.android.com/studio/build/multidex.html
increaseMinSdkForDev=false
# Speed hack to decrease dev build times. Doesn't do anything as it is, but if a developer wants to they can enable this speed hack by
# changing the "disableSomeBuildTypes" property from "false" to "true" and then set the build type that they want to keep with the
# "disableAllBuildTypesApartFrom" property. This will get rid of all build types apart from the one declared and make the build a bit faster
disableSomeBuildTypes=false
disableAllBuildTypesApartFrom=debug
# OTHER ====================================================================================================================================
# Speed up build times (including full builds, incremental builds, and instant run) by storing and reusing files/directories that were
# created in previous builds of the same or different Android project. See http://tools.android.com/tech-docs/build-cache for more.
android.enableBuildCache=true
appVersionName=0.0.1
appVersionCode=1